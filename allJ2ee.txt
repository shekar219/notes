Table of Contents

A) Introduction to JAVA EE
===============================
	1. Introduction to web applications
	2. About JAVA EE and its APIs
	3. JAVA EE 2 tier Architecture
	4. JAVA EE 3 tier Architecture
	
B) JDBC
=================================
	1. Introduction
		-About JDBC
		-JDBC prerequirements
		-Installing mySql DB Server
		- First JDBC Program
	2. Drivers
		-Introduction
		-JAR file
		-About Driver class
		-How to load the Driver class into the program
		-Driver Types
	3. DB URL
	4. Connection Interface
		-DriverManager class
		-getConnection()
		-Connection Object
	5. JDBC Statements
		-Dynamic and Static SQL Queries
		-Statement and Prepared Statement
		-executeQuery() and executeUpdate()
	6. ResultSet

C) Servlets
=====================================
	1. Introduction
		- Web Browser
		-Web Resources
		-Web Application
		-Web Server
		-Installation of Tom Cat Server
	2. About Servlets
		-Servlets Introduction
		- Creating the First Servlet
		-WAR file
		-Build and Deployment Process
	3. Web URL
		-Web URL Structure
		-Query String
		-http and https protocol
		- key elements of http request and http response
		- http methods
		-Diff b/w GET and POST
	4. Servlet Coontainer
		- About Servlet container and advantages
		- Request and Response Objects
		- getParameter() and getParameterValues()
		- About XML
		-About Deployment Descriptor Stub(web.xml)
	5. Servlet Hierarchy
		-GenericServlet
		-HttpServlet
		-Diff b/w HttpServlet and GenericServlet
		-Servlet Life Cycle
		-SingleThreadedModel Servlets
	6. ServletContext and ServletConfig
	7. redirect(), forward() and include()
	8. Attributes
	9. Cookies
		- introduction
		-persistent and non persistent cookies
	10. Session
		- Introduction 
		-Advantages of Session
		-steps to work with Session
		-URL rewriting

D) JSP
=========================
	1. Introduction
		-About JSP
		-Diff b/w Servlets and JSP
	2. JSP life cycle
	3. JSP objects
	   -object scope in JSP
	   -implicit objects in JSP
	4. JSP tags
		- Declaration Tag
		- Expression Tag
		-Scriptlet Tag
		-Action Tag
			* forward Action
			*  include Action
			* use bean Action
		-Directive tag
			* include Directive
			* page Directive
			* taglib Directive
	5. Error handling in JSP
	6. Implementing SingleThreadModels in JSP
	7. Redirect in JSP



Computer
============
>  It is a combination of hardware and OS.
> computer are represented as shown below


Server
========
It is a computer but the  hardware  configuration of this is
 complex compare to the desktop computer.
Eg: Server can have 22 TB of RAM

Server are represented as shown below




Operating System
=================
It acts like an interface between application and
 underlying hardware


 
 
 
 

Applications
==============
> Every Applications  has its own dedicated functionality 
eg: Adobe reader can only open pdf files
Media player can open only media files 

> Every application is platform dependent including
 java application.
 
> Java application is platform dependent however,
 java as a programming language is platform 
  independent.
  
> Java as programming language is platform independent because 
 JRE or JVM are platform dependent

There are 2 types of applications 
1. Standalone application(Unshared application)
2. Web application(Shared Applications)


Standalone Applications
=====================
Standalone applications are present in our 
own computer and they are dedicated per user.
Eg: Adobe reader, Web browser, Media player etc...






There are 2 types of Standalone applications 
1. Desktop Application
	As the name implies it is present in our own computer

2. Mobile Application
	As the name implies it is present in smart phones
	
	
	
	
Web Applications
===================
Web applications are not present in our own computer,
 but they are present in some other computer,
 where our computer and that computer is network
 connected.
Eg: GMail, Facebook, Twitter etc...
		
To interact with web application we must make use of 
1. Network 
2.Web Browser

 Network
 ===================
	It is a collection of computers and there are
	two types of network
	
	1. Intranet(Private network)
	 eg: JSpiders attendance tracking web application
	 is present in intranet network.
	
	2. Internet(Public network)
		eg: Gmail app is present in internet
	
	
Web Browser
================
Web browser is a desktop application and if we are
 using browser means we are interacting with
 web application.
 

	
	
	







RDBMS Application
===================
It is also an application which helps us to store and
 maintain GBs to TBs of data
RDBMS application is represented as shown below














J2EE(Java 2 Enterprise Edition)
===============================
>J2EE is a collection of APIs (Application Programming Interface),
 which helps us to develop "Enterprise Web Application".

API(Application Programming Interface)
===================================
>An API is a collection of packages with dedicated functionality


Major API of J2EE are
=======================
1. JDBC
2.Servlet
3.JSP
4.Java Mail
etc...

>JDBC API helps web application to interact with
 RDBMS Application.
>Servlet and JSP APIs helps web application to 
	-Get the request from browser
	-Generate the response
	-Gives it back to the browser
>"J2EE" helps to develop "Web Application"
 where as "Android / IOS" helps
 to develop "Mobile Apps".

 
 
 
>Mobile Applications are 2 tier Architectured Applications
>However web application acts like 3 tier architectured application if it is 
accessed using web browser.

> 2 tier architectured application if it is accessed using mobile app
> 3 tier architectured applications are easy to maintain as compared to 
	2 tier architectured applications.
	

	

JAVA Thumb Rules
=======================
1. if LHS  "equals to" RHS then LHS is always Concrete Class.
		A ref = new A();

2. if LHS "not equals to" RHS then LHS can be Concrete class or Interface or Abstract Class.
		B ref = new A();
		
3. A class which is declared with "abstract" keyword is called as an "Abstract class".

4. A class which is declared without "abstract" keyword is called Concrete class.

5. All final classes are "concrete classes".

6. Simply having an Interface is of no use & there must be atleast one Implementation classes.

7. Simply having an Abstract class is of "No use" and there must be a "Atleast one Sub  class"

8. In java, "super class" can be either an "abstract class" or "concrete class".

9. Anything in java which Starts with Upper Case  letter is either class Name or interface name

10. Anything in java which starts with lowercase letter and without paranthesis is a variable name.

11. Anything in java with paranthesis is a "Method name".

12. in Java, anything apart from primitive datatype are called as Object References.
	for eg: 
			int i;
			boolean isTrue;
			Abc ref;
where, "i" and "isTrue" are primitive datatype variables.
		ref is a object ref variable
		Where, "Abc" can be an interface or an abstract class or concrete class
		
13. if a method/constructor input argument is other than primitive datatype, then it can be interface/concrete class/abstract class

	public void myMethod(Abc ref)
	{
		/*
		 * Some business Logic
		 */
	}

14. if a method return type is other than primitive datatype, then it can be "Interface/concrete class/Abstract class"
	
	public Abc myMethod()
	{
		/*
		 * Some business Logic
		 */
	return Abc object/sub class object/implementation class object
	}
	
There are 2 types of interfaces
1. Marker Interface
2. Non Marker Interface

> if a class implements an interface & we are not getting any compilation error means it can be a Non marker/marker interface

> if it is a non marker interface then it will not contain any abstract methods in it but it should consists of only variables.




SOME USEFUL SQL QUERIES
=====================================
1.To connect  to the created Database
-----------------------------------------
use db_name;

2. To get the list of the  Database
-----------------------------------------
show databases;

3. To get the list of the tables
-----------------------------------------
show tables;

4. To create the Database
------------------------------------------
create  database db_name;

5.To know the table structure
------------------------------------------
describe table_name;





JDBC(Java Database Connectivity)
========================================
> It is an API, as the name implies it helps to achieve the connectivity 
between java program & database.
> Note: Servlets and JSP are java program
> if we have web application and if it has a DB, then it needs 
	to interact with DB to read/modify the database.
> JDBC helps us to interact with database & in the world of java	
	JDBC is the one and only API that helps to interact only with 
	RDBMS application
> JDBC is DB independant using JDBC we can interact with any RDBMS application
	exists in the world.
	
Note: MongoDB & Hadoop Distributed File System(HDFS/Hadoop) application are not
	RDBMS applications.

JDBC prerequirements
=======================================
install an RDBMS application(MySQL 5.5)
create a database(schema) by name
"j2ee_db"

create a table by name student_info in the above database

insert some data in the above table

SQL Queries for MySQL RDBMS application

create database j2ee_db

create table student_info 
(regno int(10) not null,
 first_name varchar(20),
 middle_name varchar(20),
 last_name varchar(20),
 primary key(regno));


Necessary Steps to work with JDBC
======================================
1. Load the Driver
2. Get the DB connection via Driver
3. Issue SQL queries via Connection
4. Process the results returned by SQL Queries
5. Close all the JDBC objects

Note: 
1. All the above steps are mandatory
2. All these steps are interdependent.



Note: 
> "java.sql.*" is thee package representation of JDBC
> Any class/ Interface belongs to this package means its part of JDBC



JAR (JAVA ARCHIVE) File
===========================================================
> It is a collection of .class files + other necessary resources(Text  file,XML, property files etc..)
>JAR File helps us to transfer the java files/.class files/java application from one location to another location
>JAR file will have .jar file extension and functionality wise its similar to zip files.

Steps to create JAR file
============================================
>Right click on the java project which we want to transfer, select "Export".
>Select "JAR file" option present under "java" and  click on "Next".
> Provide the "destination & file name", click on "finish".

Steps to make use of JAR file
=============================================
1. Right click on the java project, where we want to make use of jar file, select "build path" and 
click on "Add External Archives".
2. Select jar file and click on open.
3. We see JAR under "referenced libraries".









Driver  
===========================
>Driver is a additional software Component required by JDBC to interact with RDBMS application
>Drivers are provided by DB vendor and they are DB dependent.
>using MySQL Driver we can only interact with MySQL RDBMS application and using DB2 Driver we can only interact with 
DB2 RDBMS application.
>Driver as the name implies, acts like a Bridge between java application and RDBMS application.












java.sql.Driver d = new com.mysql.jdbc.Driver();

> Driver class is a concrete class, present in driver JAR file, is one thar implements  the java.sql.Driver interface.
> This interface is present in JDBC API and every JDBC driver provider has to implement this interface.
>By referring Driver manual we can get the "Driver class" information.


Steps to load the "Driver class" into the program
==================================================================
There are 2 ways to load the Driver class

By invoking "registerDriver()" method present in "java.sql.DriverManager" class by passing an instance of "Driver  class"

Syntax
================
public void DriverManager.registerDriver(java.sql.Driver d) throws SQLException

code for MySQL Driver
========================
1. java.sql.Driver ref = new com.mysql.jdbc.Driver();
DriverManager.registerDriver(ref);

2. Class.forName("com.mysql.jdbc.Driver").newInstance();
> This is the most common approach to register a Driver class which helps us to pass Driver class
Name at Runtime.
> But if we create an instance of driver class using new operator, then driver class name  cant be passed at runtime


Driver Types
===========================
There are 4 types of Driver
1.Type 1 : JDBC ODBC Bridge
2.Type 2: Native - API Driver
3.Type 3: Network protocol Driver
4.Type 4: Native protocol Driver

ODBC: open database connectivity


DB URL (DataBase Uniform Resource Locator)
===========================================
> As the name implies, it uniquely identifies Database or a RDBMS application in the network.
> The structure of DB URL is 
	<protocol>:<sub-protocol>:<sub-name>
	
	
1.Protocol
====================
> it is a mandatory information.
>in case of java, protocol is "jdbc"

2.Sub-protocol
===================
> this information is provided by DB vendor and we have to refer the Driver manual to get this information
>It's a mandatory information
>it identifies the "DB connectivity mechanism" used to connect to DB
>In case of MySQL, sub-protocol is "mysql" but in case of Oracle or DB2 it is different.

3. Subname
========================
> it is a mandatory information.
> it consists of,
	1.Host name(computer name/ IP address)
	2.Port number
	3.DataBase name/schema name
	4.Username  & password

> Arrangement of subname varies from driver to driver, we have to refer the driver manual and arrange accordingly.

>port number:- 
	> it uniquely identifies an application in os.
	> in case of db url, it uniquely identifies a RDBMS application.
	

JDBC DBURL of different database vendor
==================================================

Oracle:
===============
	jdbc:oracle:thin:myuser/mypassword@myhost:1521:myDB
	
MySQL
=================
jdbc:mysql://myhost:3306/myDB?user=myuser&password=mypassword

MS-SQL
=================
jdbc:microsoft:sqlserver://myhost:1433;DatabaseName=myDB;user=myuser;password=mypassword

java.sql.DriverManager
===========================
> DriverManager is a concrete class present in JDBC API and as the name implies it manages the driver
> it helps java program to establish the connection to DB and for that it requires following two critical 
information.
1) Driver class
2) DB URL
> By invoking "registerDriver()" method on DriverManager we can provide an Object of Driver class.
>By invoking "getConnection()" method on DriverManager we can provide "DB URL"
>DriverManager getConnection() helps us to establish the connection with database or
returns on Object of Connection if it is able to establish the connection to DB
>java.sql.Connection is an interface and it is an object representation of physical database connection, 
that is used by the java program to communicate with DB.
>DriverManager consists of only one constructor  which is private default in nature.
>Hence it cannot be inherited or instantiated so whatever methods it exposes to the outside world, they should be 
"public static" in nature.
> There are 3 overloaded variants of getConnection() method in DriverManager class

	1. Connection con = DriverManager.getConnection(dburl) throws SQLException;
		String dburl = "jdbc:mysql://localhost:3306/myDB?user=root&password=root";
	2. Connection con = DriverManager.getConnection(dburl, user,password) throws SQLException;
		String dburl = "jdbc:mysql://localhost:3306/myDB";
		String user = "root";
		String password = "root";
	3. Connection con = DriverManager.getConnection(dburl, properties);//properties is a object reference of a class java.util.Properties
	
	
Results of RDBMS application
=================================
> Whenever we issue "SELECT" SQL queries to DB  it returns DB Results.
> Whenever we issue "other than SELECT" SQL Queries it returns number of rows affected


JDBC statements
================
> JDBC statements send SQL queries to RDBMS and retrieve the data from RDBMS application.
> There are 2 different types of JDBC statements
	
	1. java.sql.Statement
	2. java.sql.PreparedStatement

> Once we create JDBC statement object (any of the above type) then we must invoke any one of the below method to issue SQL queries to the DB.
						              ====	
             ===================================
	int executeUpdate() throws SQLException 
             ===================================

> This method is used to execute "Other then Select" SQL Queries.
								=====================
> This method returns "no. of rows affected count",  in the form of integer.
		=====================

	========================================
	     ResultSet executeQuery() throws SQLException  
	========================================

> This method is used to execute "only SELECT" SQL Queries
			  ============
> This method returns "DB results" in the form of "ResultSet" object.
				             =========


java.sql.Statement
==============
> Its an interface & an object of statement is used to execute statement SQL queries.
> Statement object can be created by invoking createStatement() method on Connection object.
				     ==============                  =========
Syntax
=====
	Statement Connection.createStatement throws SQLException

Example
=======
	 Statement stmt = con.createStatement();

> where con is the object reference of java.sql.Connection object


java.sql.PreparedStatement
=====================
> Its an interface & an object of PreparedStatement is used to execute "Dynamic SQL Queries"
						           ==================
> PreparedStatement object can be created by invoking "prepareStatement()" method on "Connection" object.
					    ===============                

Syntax
======
	PreparedStatement Connection.prepareStatement(String query) throws SQLException

Example
=======
	String query = "SELECT * FROM students_info WHERE regno=?";
	PreparedStatement pstmt = con.prepareStatement(query);

> where "con" is the object reference of "java.sql.Connection" object

> PreparedStatements must be used with ? & then ? needs to be set using proper setXXX() method before executing dynamic SQL query.

Syntax
=====
	void setXXX(position of ? as int value, corresponding runtime value) throws SQLException

> where XXX = java data type corresponding to DB column data type 
> Also, "Runtime value" Data type should be same as "XXX Data type".
> PreparedStatement are also known as "preCompiledStatement" & they helps us to acheive high performance.




Processing the Results returned by SQL Queries
=======================================================
Whenever we issue sql query to RDBMS application via JDBC. there are two kinds of result executed out of RDBMS application
	1. Number of rows affected count as "integer value".
	2. "DB results" in the form of ResultSet Object.
	
	
java.sql.ResultSet
=============================
> It is an interface an object of ResultSet is an "object representation of the DB result" produced by "select" sql query.
>ResultSet object is produced by invoking executeQuery() on  Statement or PreparedStatement objects.

Example:
=================
			=====================================================
			||	ResultSet rs = stmt.executeQuery("Sql query");  ||
			======================================================
	Where, stmt is an object reference of Statement interface
	
			=====================================================
			||	ResultSet rs = pstmt.executeQuery(); 			 ||
			======================================================
	Where, pstmt is an object reference of PreparedStatement interface
	
>ResultSet contains N no of rows with each row containing N no of columns
>no of rows and column in ResultSet are directly depends on "where" condition and "column list" respectively in select SQL query.
>ResultSet object may consists of zero/more or zero/one rows
> if ResultSet consists of zero/more of data then we must use while loop
> if ResultSet consists of zero/one row of data then we can either use while loop or if block(Preferred).
> Once the ResultSet is produced, data from ResultSet can be extracted as follows

	1. Move to desired row by calling necessary  ResultSet methods 
		for eg: next(), first(), last(), etc...
	2. Retrieve the desired column value using 
			getXXX(position of the column in SQL Query as integer value);
									(OR)
			getXXX(	name of the column in SQL Query as String value);
			
	Where, XXX => java datatype corresponding to  DB table column datatype

Note: getXXX() are the only method to retrieve data from ResultSet object.


Why we need to close Necessary JDBC objects
==============================================
> Jdbc objects such as 
	-Connection
	-Statement,PreparedStatement
	-ResultSet
	makes use of memory.
	
> In case of Connection object, further RDBMS application resources are consumed
> Also memory consumed by ResultSet object is comparatively more  compared to other JDBC Objects.
> Hence forgetting to close any of the JDBC objects will "heavily impact java aswell as  RDBMS application performance".
	and  Garbage Collection should not be relied upon.
> So it is important to close any of the JDBC object as soon as their job is done.
>To close any of the  JDBC object invoke close() method.

	=============================================
	|| public void close() throws SQLException ||
	=============================================
	
>Commonly used JDBC objects are 
	1. java.sql.DriverManager
	2. java.sql.Connection
	3. java.sql.Statement
	4. java.sql.PreparedStatement
	5. java.sql.ResultSet
	6.java.sql.SQLException

> Apart from DriverManager and SQLException rest of them are "interfaces" whereas DriverManager and SQLException are "Concrete class".
> SQLException is a concrete class which extends java.lang.Exception and its a checked exception.


			try
			{
				//step 1
				//step 2
				//step 3
				//step 4
			
			}
			catch(--------------------)
			{
				
			
			}
			finally
			{
				//step 5
			}
	
> Step 1 to 4 will be in try block and step 5 will be in finally block
>While making use of JDBC, we must follow 5 steps and out of 5, which happens only once are
	1. We need to load the Driver
	2. We have to get DB connection
	5. We have to close JDBC objects
> Step 3 and 4 (Issuing Sql query and processing results) can happen N no of times depending on ones need.
                                                                                                          


Servlet Introduction
=================================


Web Browswer
===============================
> It is a desktop application which helps us to interact with web applications
> Browser is the one and only application which understand content/data present in html and display accordingly.

Web Resources
===============================
>Resources present inside web application are called as web resources.

There are two types of web resources
========================================
1. Static web resources
===========================

>These resources "are present at web application" before making the request.
>Content of those resources "does not change " for every request(Static response)
>In otherwords, resources which generates "static response" is called as static web resources.

-few examples,
1. Any songs/video/movie files download
2. Any softwares download
3. Any books(pdf, ms word, etc...) download

2.Dynamic Web resources
===============================
>These resources "does not present at web application" before making the request and they get generated at the time of request.
> In otherwords resources which generates dynamic response, is called Dynamic web resources.
>content of the resources "may change" for every requesst(Dynamic response).

-few examples
1.Any net Banking web application transaction staatement download(pdf).
2.Any post paid connection statement download (pdf).
3. Google search page.
4. Gmail Inbox page.
5. Facebook homepage.
6.Gmail "Download all attachments"(zip file).

Note:
==========
>both static and Dynamic response can be html or non html in nature.


Web application
=====================
> web application is an application which is accessed over the network with the help of browser.
> web application is a collection of web resources.
> If a web application contains only static web resources then it is called as an staatic web application.
> if a web application contains one/more dynamic web resources then it is called as an dynamic web application.
	eg: gmail, facebook, twitter, flipkart, etc...
> J2EE/ Java EE helps us to develop dynamic web application.
> however html helps us to develop static web application.

WebServer 
============================
> Like any other application(Adobe Reader, media player etc..) webserver is also an application which runs an os.
> Web server as the name implies "Server requests to a web application".
>In otherwords, it helps both web browser and web application to interact with each other.
> Hence every web application(Static/Dynamic) is directly under the control of web server.

few examples of webserver
==============================
1. Apache Tomcat
2. Redhat JBoss
3. IBM websphere
4. Oracle weblogic
5. Oracle glassfish

Steps to install apache tomcat webserver 
====================================
Download the apache tomcat(zip version) and extract it onto some directory.

Set the following 2 environment variables
1. JAVA_HOME
2. CATALINA_HOME

for eg:
		JAVA_HOME : c:\programfiles\java\jdk1.8.0.27
		CATALINA_HOME: c:\programfiles\apache-tomcat-8.0.5
		
Note:
=========
> Both paths should not point to "lib/bin" folder
> JAVA_HOME should consists of "java installation " path not the "java exe" location path.

Go to "<Tomcat-location>\bin" folder and double  click on startup.bat or startup file.

>After this step, server should start without throwing an exception in the console.
>If server throws an exception then it menas that server started in exception mode.
> in this case, most likely there is a problem in setting up the environment variable.
> To shut down the webserver close the console window or use "ctrl  + c"








	
